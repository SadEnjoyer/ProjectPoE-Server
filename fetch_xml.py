import base64
import logging
import zlib
import requests
from bs4 import BeautifulSoup

logger = logging.getLogger(__name__)

def _fetch_xml_from_url(url: str, timeout: float = 6.0) -> str:
    """Get a Path Of Building import code shared with pastebin.com.

    :raises: :class:`~requests.URLRequired`, :class:`~requests.Timeout`,
        :class:`~requests.ConnectionError`, :class:`~requests.HTTPError`,
        :class:`~requests.TooManyRedirects`, :class:`~requests.RequestException`

    :return: Decompressed XML build document."""
    if url.startswith("https://pastebin.com/"):
        raw = url.replace("https://pastebin.com/", "https://pastebin.com/raw/")
        try:
            request = requests.get(raw, timeout=timeout)
            request.raise_for_status()
        except requests.URLRequired:
            logger.exception(f"{url} is not a valid URL.")
        except requests.Timeout:
            logger.exception(
                f"Connection timed out, try again or raise the timeout ({timeout}s)."
            )
        except requests.ConnectionError:
            logger.exception(
                f"There was a network problem (DNS failure, refused connection, etc)."
            )
        except requests.HTTPError:
            logger.exception(f"HTTP request returned unsuccessful status code.")
        except requests.TooManyRedirects:
            logger.exception(f"Request exceeds the maximum number of redirects.")
        except requests.RequestException:
            logger.exception(f"Some other unspecified fatal error; cannot continue.")
        else:
            return _fetch_xml_from_import_code(request.text)
    else:
        logger.exception(f"{url} is not a valid pastebin.com URL.")


def _fetch_xml_from_import_code(import_code: str) -> str:
    """Decodes and unzips a Path Of Building import code.

    :raises: :class:`TypeError`, :class:`ValueError`

    :return: Decompressed XML build document."""
    try:
        base64_decode = base64.urlsafe_b64decode(import_code)
        decompressed_xml = zlib.decompress(base64_decode)
    except (TypeError, ValueError):
        logger.exception("Error while decoding.")
    except zlib.error:
        logger.exception("Error while decompressing.")
    else:

        decompressed_str = decompressed_xml.decode('utf-8')
        print(decompressed_str)

        '''with open('output.xml', 'wb') as file:
            file.write(decompressed_xml)  # Запись байтовых данных в файл'''

        return decompressed_str


def get_base64_from_pobb(url: str) -> str:
    """
    Get a Path of Building Import code shared with pobb.in

    :param url: POBB-url
    :return: Decompressed XML build document
    """

    response = requests.get(url)

    if response.status_code == 200:

        soup = BeautifulSoup(response.content, 'html.parser')
        textarea = soup.find('textarea')

        if textarea:

            print(_fetch_xml_from_import_code(textarea.text))
            return _fetch_xml_from_import_code(textarea.text)
        
        else:
            return 'Тег <textarea> не найден.'
    else:
        return f'Ошибка загрузки страницы: {response.status_code}'

print(get_base64_from_pobb('https://pobb.in/muwRQg6RPTCi'))


#_fetch_xml_from_import_code('')